# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven
run-name: ${{ github.actor }} is Collecting Maven-ness🚀
on: [push]
jobs:
  Collect:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: Get current date
        id: DATE
        run: echo "DATE=$(date '+%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Build with Maven
        run: mvn -DskipTests=true -B package --file pom.xml

      - name: Bundle .m2 directory
        run: |
            ls -lah ${{ github.workspace }}
            DATE=`date '+%Y%m%d-%H%M'`
            tar -cvzf maven-collector-m2-${{ steps.date.outputs.date }}.tgz -C ~/.m2 .

      - name: Bundle BoM ZIP
        run: |
            cd target
            ls -lah ${{ github.workspace }}
            zip ../maven-collector-bom-${{ steps.date.outputs.date }}.zip bom.*

      - name: Archive M2 artifact
        uses: actions/upload-artifact@v4
        with:
          name: maven-collector-m2-${{ steps.date.outputs.date }}.tgz
          path: maven-collector-m2-${{ steps.date.outputs.date }}.tgz
      - name: Archive assembly artifact
        uses: actions/upload-artifact@v4
        with:
          name: maven-collector-assembly-${{ steps.date.outputs.date }}.zip
          path: target/demo-0.0.1.zip
      - name: Archive BOM
        uses: actions/upload-artifact@v4
        with:
          name: maven-collector-bom-${{ steps.date.outputs.date }}.zip
          path: maven-collector-bom-${{ steps.date.outputs.date }}.zip
  
  
      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
      #- name: Update dependency graph
      #  uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.date.outputs.date }}
          release_name: Release ${{ steps.date.outputs.date }}
          draft: false
          prerelease: false
          
      - name: Upload Release tgz
        id: upload-release-tgz 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./maven-collector-m2-${{ steps.date.outputs.date }}.tgz
          asset_name: maven-collector-m2-${{ steps.date.outputs.date }}.tgz
          asset_content_type: application/tgz
          
      - name: Upload Release BOM
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./maven-collector-bom-${{ steps.date.outputs.date }}.zip
          asset_name: maven-collector-bom-${{ steps.date.outputs.date }}.zip
          asset_content_type: application/zip

      
      
